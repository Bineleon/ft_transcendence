
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  passwordHash: 'passwordHash',
  avatarUrl: 'avatarUrl',
  playerRef: 'playerRef',
  twoFASecret: 'twoFASecret',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TournamentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  status: 'status',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.MatchScalarFieldEnum = {
  id: 'id',
  tournamentId: 'tournamentId',
  gameCode: 'gameCode',
  round: 'round',
  gameIndex: 'gameIndex',
  p1UserId: 'p1UserId',
  p1Ref: 'p1Ref',
  p1Score: 'p1Score',
  p2UserId: 'p2UserId',
  p2Ref: 'p2Ref',
  p2Score: 'p2Score',
  winnerUserId: 'winnerUserId',
  winnerRef: 'winnerRef',
  status: 'status',
  txHash: 'txHash',
  onchainAt: 'onchainAt',
  closedAt: 'closedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tokenHash: 'tokenHash',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.FriendScalarFieldEnum = {
  userId: 'userId',
  friendId: 'friendId',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.TournamentStatus = exports.$Enums.TournamentStatus = {
  OPEN: 'OPEN',
  RUNNING: 'RUNNING',
  CLOSED: 'CLOSED'
};

exports.MatchStatus = exports.$Enums.MatchStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  CLOSED: 'CLOSED',
  DB_ONLY: 'DB_ONLY',
  CONFIRMED: 'CONFIRMED',
  FAILED: 'FAILED'
};

exports.FriendStatus = exports.$Enums.FriendStatus = {
  pending: 'pending',
  accepted: 'accepted',
  blocked: 'blocked'
};

exports.Prisma.ModelName = {
  User: 'User',
  Tournament: 'Tournament',
  Match: 'Match',
  Session: 'Session',
  Friend: 'Friend'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/neleon/42/ft_transcendence/backend/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/neleon/42/ft_transcendence/backend/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\n// prisma/schema.prisma\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum TournamentStatus {\n  OPEN\n  RUNNING\n  CLOSED\n}\n\nenum MatchStatus {\n  SCHEDULED\n  IN_PROGRESS\n  CLOSED\n  DB_ONLY\n  CONFIRMED\n  FAILED\n}\n\nenum FriendStatus {\n  pending\n  accepted\n  blocked\n}\n\nmodel User {\n  id           Int     @id @default(autoincrement())\n  username     String  @unique\n  email        String  @unique\n  passwordHash String\n  avatarUrl    String? @map(\"avatar_url\")\n  playerRef    String? @unique @map(\"player_ref\") // hash/adresse on-chain (nullable au d√©but)\n  twoFASecret  String? @map(\"2fa_secret\")\n\n  createdAt DateTime @default(now()) @map(\"created_at\")\n  updatedAt DateTime @default(now()) @updatedAt @map(\"updated_at\")\n\n  // Relations\n  createdTournaments Tournament[] @relation(\"UserCreatedTournaments\")\n  sessions           Session[]\n  matchesAsP1        Match[]      @relation(\"P1\")\n  matchesAsP2        Match[]      @relation(\"P2\")\n  matchesWon         Match[]      @relation(\"Winner\")\n  friends            Friend[]     @relation(\"UserFriends\")\n  friendOf           Friend[]     @relation(\"UserFriendOf\")\n}\n\nmodel Tournament {\n  id        Int              @id @default(autoincrement())\n  name      String\n  status    TournamentStatus @default(OPEN)\n  createdBy Int?             @map(\"created_by\")\n  createdAt DateTime         @default(now()) @map(\"created_at\")\n\n  creator User?   @relation(\"UserCreatedTournaments\", fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: SetNull)\n  matches Match[]\n\n  @@index([status])\n}\n\nmodel Match {\n  id           Int    @id @default(autoincrement())\n  tournamentId Int    @map(\"tournament_id\")\n  gameCode     String @default(\"pong\") @map(\"game_code\")\n  round        Int?\n  gameIndex    Int?   @map(\"game_index\")\n\n  p1UserId Int     @map(\"p1_user_id\")\n  p1Ref    String? @map(\"p1_ref\")\n  p1Score  Int?    @map(\"p1_score\")\n\n  p2UserId Int     @map(\"p2_user_id\")\n  p2Ref    String? @map(\"p2_ref\")\n  p2Score  Int?    @map(\"p2_score\")\n\n  winnerUserId Int?    @map(\"winner_user_id\")\n  winnerRef    String? @map(\"winner_ref\")\n\n  status    MatchStatus @default(SCHEDULED)\n  txHash    String?     @map(\"tx_hash\")\n  onchainAt DateTime?   @map(\"onchain_at\")\n  closedAt  DateTime?   @map(\"closed_at\")\n  createdAt DateTime    @default(now()) @map(\"created_at\")\n  updatedAt DateTime    @default(now()) @updatedAt @map(\"updated_at\")\n\n  tournament Tournament @relation(fields: [tournamentId], references: [id], onUpdate: Cascade, onDelete: Cascade)\n  p1         User       @relation(\"P1\", fields: [p1UserId], references: [id], onUpdate: Cascade, onDelete: Restrict)\n  p2         User       @relation(\"P2\", fields: [p2UserId], references: [id], onUpdate: Cascade, onDelete: Restrict)\n  winner     User?      @relation(\"Winner\", fields: [winnerUserId], references: [id], onUpdate: Cascade, onDelete: SetNull)\n\n  @@unique([tournamentId, round, gameIndex])\n  @@index([tournamentId])\n  @@index([status])\n}\n\nmodel Session {\n  id        Int      @id @default(autoincrement())\n  userId    Int      @map(\"user_id\")\n  tokenHash String   @unique @map(\"token_hash\") // stocker un hash, pas un JWT en clair\n  expiresAt DateTime @map(\"expires_at\")\n  createdAt DateTime @default(now()) @map(\"created_at\")\n\n  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)\n}\n\nmodel Friend {\n  userId    Int          @map(\"user_id\")\n  friendId  Int          @map(\"friend_id\")\n  status    FriendStatus @default(pending)\n  createdAt DateTime     @default(now()) @map(\"created_at\")\n\n  user   User @relation(\"UserFriends\", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)\n  friend User @relation(\"UserFriendOf\", fields: [friendId], references: [id], onUpdate: Cascade, onDelete: Cascade)\n\n  @@id([userId, friendId])\n}\n",
  "inlineSchemaHash": "13e628b16ed272e6518b2c40207a3348d31dda88f1500592f07977efb0334c38",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatarUrl\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"avatar_url\"},{\"name\":\"playerRef\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"player_ref\"},{\"name\":\"twoFASecret\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"2fa_secret\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"createdTournaments\",\"kind\":\"object\",\"type\":\"Tournament\",\"relationName\":\"UserCreatedTournaments\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"matchesAsP1\",\"kind\":\"object\",\"type\":\"Match\",\"relationName\":\"P1\"},{\"name\":\"matchesAsP2\",\"kind\":\"object\",\"type\":\"Match\",\"relationName\":\"P2\"},{\"name\":\"matchesWon\",\"kind\":\"object\",\"type\":\"Match\",\"relationName\":\"Winner\"},{\"name\":\"friends\",\"kind\":\"object\",\"type\":\"Friend\",\"relationName\":\"UserFriends\"},{\"name\":\"friendOf\",\"kind\":\"object\",\"type\":\"Friend\",\"relationName\":\"UserFriendOf\"}],\"dbName\":null},\"Tournament\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"TournamentStatus\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"created_by\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"creator\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserCreatedTournaments\"},{\"name\":\"matches\",\"kind\":\"object\",\"type\":\"Match\",\"relationName\":\"MatchToTournament\"}],\"dbName\":null},\"Match\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"tournamentId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"tournament_id\"},{\"name\":\"gameCode\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"game_code\"},{\"name\":\"round\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"gameIndex\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"game_index\"},{\"name\":\"p1UserId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"p1_user_id\"},{\"name\":\"p1Ref\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"p1_ref\"},{\"name\":\"p1Score\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"p1_score\"},{\"name\":\"p2UserId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"p2_user_id\"},{\"name\":\"p2Ref\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"p2_ref\"},{\"name\":\"p2Score\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"p2_score\"},{\"name\":\"winnerUserId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"winner_user_id\"},{\"name\":\"winnerRef\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"winner_ref\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"MatchStatus\"},{\"name\":\"txHash\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"tx_hash\"},{\"name\":\"onchainAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"onchain_at\"},{\"name\":\"closedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"closed_at\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"tournament\",\"kind\":\"object\",\"type\":\"Tournament\",\"relationName\":\"MatchToTournament\"},{\"name\":\"p1\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"P1\"},{\"name\":\"p2\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"P2\"},{\"name\":\"winner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"Winner\"}],\"dbName\":null},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"user_id\"},{\"name\":\"tokenHash\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"token_hash\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"expires_at\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"}],\"dbName\":null},\"Friend\":{\"fields\":[{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"user_id\"},{\"name\":\"friendId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"friend_id\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"FriendStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserFriends\"},{\"name\":\"friend\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserFriendOf\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

